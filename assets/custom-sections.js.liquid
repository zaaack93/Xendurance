// js/sections/Hero-section-with-bubbles.js
class BubblesContainer extends HTMLElement {
    constructor() {
      super();
    }
  
    connectedCallback() {
      this.render();
    }
  
    render() {
      const categoryBubbles = Array.from(this.querySelectorAll('.bubble'));
      const groupedBlocks = groupBlocksByCategory(categoryBubbles);
  
      const tabHeader = document.createElement('div');
      tabHeader.classList.add('tab-header');
  
      groupedBlocks.forEach((category) => {
        const tabItem = document.createElement('div');
        tabItem.classList.add('tab-item');
        tabItem.textContent = category;
        tabItem.addEventListener('click', () => {
          this.toggleVisibility(category);
        });
        tabHeader.appendChild(tabItem);
      });
  
      this.prepend(tabHeader);
      this.toggleVisibility(groupedBlocks[0])
    }
  
    toggleVisibility(category) {
        const bubbles = Array.from(this.querySelectorAll('.bubble'));
        bubbles.forEach((bubble) => {
            if (bubble.dataset.category === category) {
                bubble.style.display = 'block';
            }
            else{
                bubble.style.display = 'none';
            }
        });

        const tabItems = Array.from(this.querySelectorAll('.tab-item'));
        tabItems.forEach((tabItem) => {
          if (tabItem.textContent === category) {
            tabItem.classList.add('active');
          } else {
            tabItem.classList.remove('active');
          }
        });
        document.dispatchEvent(new CustomEvent('slide-category:update', { detail: { category } }));
    }
  }
  
  function groupBlocksByCategory(blocks) {
    const categories = new Set(blocks.map((block) => block.dataset.category));
    return Array.from(categories);
  }
  
customElements.define('bubbles-container', BubblesContainer);



 // js/sections/featured-collection-list.js 
 class FeaturedCollectionList extends HTMLElement {
  constructor() {
    super();
    this.categoryBubbles = null;
    this.tabItems = [];
  }

  connectedCallback() {
    this.render();
  }

  render(){
    const collections = Array.from(this.querySelectorAll('.products-category'));
      if(collections.length>0){
      this.tabItems = Array.from(this.querySelectorAll('.tab-collection'));

      this.tabItems.forEach((tabItem) => {
        tabItem.addEventListener('click', () => {
          const selectedCategory = tabItem.dataset.category;
          this.showCollectionByCategory(selectedCategory);
        });
      });
      this.showCollectionByCategory(collections[0].dataset.category)
    }
  }

  showCollectionByCategory(category) {
    const collections = Array.from(this.querySelectorAll('.products-category'));
        collections.forEach((collection) => {
            if (collection.dataset.category === category) {
              collection.style.display = 'grid';
            }
            else{
              collection.style.display = 'none';
            }
        });

        const tabItems = Array.from(this.querySelectorAll('.tab-collection'));
        tabItems.forEach((tabItem) => {
          if (tabItem.dataset.category === category) {
            tabItem.classList.add('active');
          } else {
            tabItem.classList.remove('active');
          }
        });
  }

}
customElements.define('featured-collection-list', FeaturedCollectionList);