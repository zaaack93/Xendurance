// js/sections/Hero-section-with-bubbles.js
class BubblesContainer extends HTMLElement {
    constructor() {
      super();
    }
  
    connectedCallback() {
      this.render();
    }
  
    render() {
      const categoryBubbles = Array.from(this.querySelectorAll('.bubble'));
      const groupedBlocks = groupBlocksByCategory(categoryBubbles);
  
      const tabHeader = document.createElement('div');
      tabHeader.classList.add('tab-header');
  
      groupedBlocks.forEach((category) => {
        const tabItem = document.createElement('div');
        tabItem.classList.add('tab-item');
        tabItem.textContent = category;
        tabItem.addEventListener('click', () => {
          this.toggleVisibility(category);
        });
        tabHeader.appendChild(tabItem);
      });
  
      this.prepend(tabHeader);
      this.toggleVisibility(groupedBlocks[0])
    }
  
    toggleVisibility(category) {
        const bubbles = Array.from(this.querySelectorAll('.bubble'));
        bubbles.forEach((bubble) => {
            if (bubble.dataset.category === category) {
                bubble.style.display = 'block';
            }
            else{
                bubble.style.display = 'none';
            }
        });

        const tabItems = Array.from(this.querySelectorAll('.tab-item'));
        tabItems.forEach((tabItem) => {
          if (tabItem.textContent === category) {
            tabItem.classList.add('active');
          } else {
            tabItem.classList.remove('active');
          }
        });
        document.dispatchEvent(new CustomEvent('slide-category:update', { detail: { category } }));
    }
  }
  
  function groupBlocksByCategory(blocks) {
    const categories = new Set(blocks.map((block) => block.dataset.category));
    return Array.from(categories);
  }
  
customElements.define('bubbles-container', BubblesContainer);



 // js/sections/featured-collection-list.js 
 class FeaturedCollectionList extends HTMLElement {
  constructor() {
    super();
    this.categoryBubbles = null;
    this.tabItems = [];
  }

  connectedCallback() {
    this.render();
  }

  render(){
    const collections = Array.from(this.querySelectorAll('.products-category'));
      if(collections.length>0){
      this.tabItems = Array.from(this.querySelectorAll('.tab-collection'));

      this.tabItems.forEach((tabItem) => {
        tabItem.addEventListener('click', () => {
          const selectedCategory = tabItem.dataset.category;
          this.showCollectionByCategory(selectedCategory);
        });
      });
      this.showCollectionByCategory(collections[0].dataset.category)
    }
  }

  showCollectionByCategory(category) {
    const collections = Array.from(this.querySelectorAll('.products-category'));
        collections.forEach((collection) => {
            if (collection.dataset.category === category) {
              collection.style.display = 'grid';
            }
            else{
              collection.style.display = 'none';
            }
        });

        const tabItems = Array.from(this.querySelectorAll('.tab-collection'));
        tabItems.forEach((tabItem) => {
          if (tabItem.dataset.category === category) {
            tabItem.classList.add('active');
          } else {
            tabItem.classList.remove('active');
          }
        });
  }

}
customElements.define('featured-collection-list', FeaturedCollectionList);




// js/sections/top-bar-filters.js
class TopBarFilters extends HTMLElement {
  constructor() {
    super();
  }

  connectedCallback() {
    this.available_filters=this.dataset.filtersAvailable.split(',');
    this.active_filters=this.dataset.filtersActive.split(',');
    this.render();
  }

  render() {
    const categoryFilters = Array.from(this.querySelectorAll('.buttons-to-check'));
    categoryFilters.forEach((category) =>{
      let availability=this.checkAvailability(category);
      switch (availability) {
        case 'available':
          category.addEventListener("click", (event)=> {
            this.handleFilter(category.dataset.forTag);
          });
          break;
        case 'active':
          category.classList.add('Active_filter');
          category.addEventListener("click", (event)=> {
            this.handleFilter(category.dataset.forTag);
          });
          break;
        case 'notallowed':
          category.disabled=true;
          break;
      }
    })

    //check for all filters and all handle to click
    let productCard = document.querySelectorAll('product-card');
    if(this.active_filters.length==1 || productCard.length == 0){
      this.querySelector('#label-for-all').classList.add('Active_filter');
    }
    this.querySelector('#label-for-all').addEventListener("click", (event)=> {
      // Get the reset button
      const label = document.querySelector("a.facet-clear-all");
      // If the label element is found, trigger a click event on it
      if (label) {
        label.click();
      }
    });
  }

  handleFilter(category) {
    const inputElements = document.querySelectorAll('input[name="filter.p.tag"]');
    inputElements.forEach(function(element){
        if(element.value.toLowerCase().replaceAll(/\s/g,'')==category.toLowerCase().replaceAll(/\s/g,'')){
            element.click();
            return
        }
    })
  }

  checkAvailability(category) {
    let foundValueActive = this.active_filters.find(function(element) {
      return element.toLowerCase().replaceAll(/\s/g,'') === category.dataset.forTag.toLowerCase().replaceAll(/\s/g,'');
    });

    let foundValueAvailable = this.available_filters.find(function(element) {
      return element.toLowerCase().replaceAll(/\s/g,'') === category.dataset.forTag.toLowerCase().replaceAll(/\s/g,'');
    });
    if(foundValueActive){
      return "active"
    }
    else if (foundValueAvailable){
      return "available"
    }
    else {
      return "notallowed"
    }
  }
}

customElements.define('top-bar-filters', TopBarFilters);